1. INSTALLING

unzip and untar the tarball, then change into the directory 'server' and type 'make' to build the binaries.

tar -zxvf rrnetfoo.tar.gz
cd server
make

In the bin directory you will then find a bunch of executeables if the compilation is passed successfully.

2. CONFIGURATION

Edit the 64netrc file and add all clients you want to communicate with your 64net/2.
An example for a client section is:

[client bitbreaker]				#Virtual name of client
partition       1,/home/bitbreaker/files/	#where does the client start
#partition      2,@/				#add more partitions if you like
mac             00:00:00:64:64:64		#client's mac-adress
ip              192.168.2.64			#client's ip-adress

3. SETTING UP STATIC ARP ROUTE

64net2 sets the necessary arp entries on its own now, and removes them again when being shut down.
The config file 64netrc has appropriate MAC and IP entries for each client for you to fill in.
The IP depends on your network setting, so just give your c64 a free IP within your subnet. 
Then choose some MAC-address that is not used in your network, maybe take one of a defective NIC to be on the safe side. The default is 00:00:00:64:64:64 that is rather fine for home use, but not if you happen to use it in a network where more than one rr-net cardridges operate this might bring you (and others) into trouble.
You also need to iset the the IP and MAC-address (as well form teh client as from the server) in the kernal image. There will be a programm avaliable soon, which spits out a readymade kernal and add the appropriate IP-addresses and MAC-addresses.

4. MODIFYING THE C64 KERNAL

Burn the patched kernal on a 27c64 EPROM or some pin-compatible flash or EEPROM like an 28C64. Now place the new kernal in your c64 (you'll need a kernal-adaptor for that, for example have a look at http://www.ihlaid.de/rom_adapter.html to see how to build your own), switch on your c64 and see if your link LED at your rr-net comes on. 
After installing the new Kernal the C64 should come up as usual. If there is any strange behaviour you might have done a mistake when burning the (E)EPROM or building the adapter. So better recheck your adapter or verify the content of the (E)EPROM.
Also be aware that the modified kernal code needs some space and thus i have thrown out handling for rs232 interfaces and some tape routines. So loading from tape and rs232 will not work anymore. This is not a bug, but a great feature. Don't stick to outdated technologies while just installing the most forward one ;-)

5. STARTING 64NET/2

For a first try then start 64net/2 manuall by entering: ./bin/64net2 
Be sure you have root-permissions, as 64net needs to set up the static arp route and else fails.

Now there should appear something like the following and the shell-prompt should not occur (unless you kill the programm with ctrl-c):

64net:/home/bitbreaker/server# ./bin/64net2
64NET/2 server V01.00 ALPHA
INIT: Communication port set to /dev/parport0
64NET/2 will be seen from client as device 9
INIT: Virtual LED states available for client(s) in file
         [/home/bitbreaker/.64net2.leds]
INIT: Debug mode messages will be displayed.
Networked device $00 assigned to IEC device $09
	/HOME/BITBREAKER/FILES/ added as partition 1 on unit $00
	(/home/bitbreaker/files/ T-1 S-1)
	@/ added as partition 3 on unit $00
64NET/2 will look in partition 2 for programmes
Network started.

If that doesn't happen, an appropriate error should be shown, that will hopefully tell you what you should fix (mostly an wrong or unknown path in the 64netrc config-file). If not, have a look into the troubleshooting-section first, before bothering the developers :-)

It is time for a first test, how's about loading the dir? Use the command load"$",9 on your C64 and see if you get something like this:

load"$",9
searching for $
loading $0801 $xxxx
ready.

On the PC there will be the following output:

*** Opening [$] on channel $00
Transferred bytes:2368
Time needed:3.566000 sec
Transferrate:  664.05 bps (   0.648KB/sec)

Fine, you are now using 64net/2 successfully with your rr-net, have fun.

6. TROUBLESHOOTING

If the c64 just hangs you might have set a wrong IP or MAC-address. A tcpdump -XX on the PC side to see if there is happening anything on the network. 
Also you should take care that the PC accepts packets at UDP port 5000 (firewall) and not any other daemon is listening at that port.
Also observe if the activity LED at the rr-net is blinking for short when you try to load a file from device #9. If not something more serious has gone wrong, mostly with the Kernal itself. Else the c64 is submitting packets, but they might reach a wrong destination or not reahc the right destination for some other reasons, like getting filtered out by a firewall.

7. THE PROTOCOLL

The protocoll consists of UDP-packets with standard UDP header and as payload the following:
Data packet:
$44 length data		(PC -> C64)
$44 $00 data length	(C64 -> PC)

Command packet:
$43 command

Acknowledge packet:
$41 $00

Error packet
$45 errornumber

8. 64NET/2 AS A DEAMON - INIT-SCRIPT

For more convenience add the following script to your startupscripts: (you can also find a copy in the  'examples'-directory)

#!/bin/sh
#

PATH=/bin:/usr/bin:/sbin:/usr/sbin:/home/bitbreaker/server/
DAEMON=/home/bitbreaker/server/bin/64net2
WORKINGDIR=/home/bitbreaker/server
C64IP="192.168.2.64"
C64MAC="00:00:00:64:64:64"

OPTIONS=""

#test -x $DAEMON -a -f /usr/sbin/pac || exit 0

case "$1" in
  start)
        echo -n "Starting c64-fileserver: 64net "
        if start-stop-daemon --quiet --stop --signal 0 --chdir $WORKINGDIR --exec $DAEMON
        then
                echo "[already running]"
        else
                arp -s $C64IP $C64MAC
                /sbin/start-stop-daemon -b --start --quiet --chdir $WORKINGDIR --exec $DAEMON -- $OPTIONS
                echo "."
        fi
        ;;
  stop)
        echo -n "Stopping c64-fileserver: 64net "
        if start-stop-daemon --quiet --stop --signal 0 --chdir $WORKINGDIR --exec $DAEMON
        then
                start-stop-daemon --quiet --stop --chdir $WORKINGDIR --exec $DAEMON
                echo "."
        else
                echo "[not running]";
        fi
        ;;
  restart)
        $0 stop
        sleep 1
        $0 start
        ;;
  *)
        echo "Usage: /etc/init.d/64net {start|stop|restart}"
        exit 1
esac

exit 0

Modify the appropriate variables so that they fit your path and username. Also add teh right values for MAC and IP of your c64.
Now you can start and stop the 64net-Server by using /etc/init.d/64net start|stop
Also you can add this script to a certain runlevel, so that it will be started automatically at bootup of oyur system. Have a look at the respective documentation of your system/distrobution on how to do that. As for debian/ubuntu this shoudl work with: 
rc-update.d 64net defaults


