	; C64 wedge for 64net/2 parallel IEC mode

	;Select which extra features to enable, remembering that they all
	;take bytes
#define CMD_AT
#define CMD_DOLLAR
#define CMD_BANG

	; Enable the following to build into $c000-$cfff rather than
	; patching the kernel
#undef USE_RAM

	;If you need more bytes, consider enabling some of the following
	;options to grab more bytes from various places.
#define USE_RS232_NMI_AREA
#define USE_KERNAL_PATCH_AREA
#define USE_RS232_EXTRA_AREAS
; -----------------------------------------------------------------------
; Reclaim some space in the kernel
; -----------------------------------------------------------------------

#ifdef USE_RAM
	.space $c000 $cfff	
#else
	; was RS232 routines
	.space $eebb $ef02
	; Dodge $EF03 which CMD RamDrive seems to refuse to override
	.space $ef04 $ef38
	.space $ef4a $f0a3

	; was open RS232
	.space $f409 $f49d

#ifdef USE_KERNAL_PATCH_AREA
	; was $AA filled patch area?
	; (truncated to not overlap with patches in SX64 kernal)
	.space $e4b7 $e4d2
#endif
#ifdef USE_RS232_EXTRA_AREAS
	; was RS232 baud rate table
	.space $e4ec $e4ff

	; RS232 input
	.space $f1b8 $f1c9
#endif
#ifdef USE_RS232_NMI_AREA
	; RS232 NMI
	; patch out calls from NMI routine, and yield the free space
	.patch $fe72
		jmp $febc
	.space $fe75 $feb9  ; RS232 NMI logic
	.space $fec2 $ff43  ; RS232 baud rate constants and input NMI
#endif
	; Make the space safe to use by nobbling the RS232 device
	.patch $f388
	; Device not present
	jmp $f707
#endif ; USE_RAM

; -----------------------------------------------------------------------
; Pre-relocation routine: copy ROM to RAM
; -----------------------------------------------------------------------
	.prerelocate

	; "Clear ,$nnnn from basic input"
	ldx #$06 
pr1	jsr $0073
	dex
	bne pr1

	; Bank ROM in
	lda #$e7
	sta $01
	; Copy ROM to RAM
	ldy #$00
rc1	lda $a000,y
	sta $a000,y
	iny
	bne rc1
	inc rc1+2
	inc rc1+5
	lda rc1+2
	cmp #$c0
	beq rc3	
	cmp #$00 
	beq rc2
	bne rc1
rc3	lda #$e0
	sta rc1+2
	sta rc1+5
	jmp rc1
rc2	nop

; -----------------------------------------------------------------------
; Post-relocation routine: copy ROM to RAM
; -----------------------------------------------------------------------
	.postrelocate

#ifdef RAMDRIVE
	; Copy ROMs to RAMDrive pages


	; Toggle BBG indicator
#else
	; Not for RAMDrive, so just bank to RAM for kernel, and set 64net
	; device
	lda #117
	sta $01
	lda #$08
	sta drive_64net
	lda #$04
	jsr $ffd2
	; Hook into BASIC decode for @, $ and ! meta-commands
	lda #<basic_decode
	sta $0308
	lda #>basic_decode
	sta $0309
#endif
	rts

; -----------------------------------------------------------------------

	; byte indicates the default drive for 64net
	drive_64net = $a7

	; Make SHIFT-RUN/STOP load from 64net device
        ; bug in build wedge breaks this if LDX drive_64net is 
	; used, as it tries to make it absolute instead of ZP addressed.
	.patch $e1d9
	ldx drive_64net 

	; Replace basic "READY." message
 	; so we know what is going on
	; .patch $a378
	; .byte '6','4','N','/','2','.'

; ---------------------------------------------------------------------
; Patch kernel ACPTR routine: Read char from serial bus
; ---------------------------------------------------------------------

	acptr=$ee14
	.patch $ee14

	jmp myacptr
	.byte $00

	.section

myacptr
	; Test if 64net/2 device
	lda $ba
	cmp drive_64net
	beq myacptr_entry
myacptr_exit
	; not for us - normal acptr
	lda #$00
	sta $a5
	jmp $ee18
myacptr_entry
	; Set lines to input
	lda #$00
	sta $dd03
	; clear error indicator
	sta $dd0c
	; Request next byte

myacptr_loop
	; Wait until something arrives
	lda $dd0d
	beq myacptr_loop 
myacptr_gotbyte
	lda $dd0c
	bne myacptr_error
	lda $dd01
	sta $a4
	clc
	cli
	rts
myacptr_error
	sta $90
	lda $dd01
	sta $a4
	sec
	cli
	rts

	.section

; ---------------------------------------------------------------------
; Patch kernel clock wait routine at $edcc (in talk/listen)
; ---------------------------------------------------------------------
	clkwait=$edcd
	.patch $edcd
	jmp myclkwait

	.section

myclkwait
	lda $ba
	cmp drive_64net
	beq myclkwait_entry
	jsr $eea0
	jmp $edd0
myclkwait_entry
	; for us - but we need do nothing - except releasing ATN
	jsr $edbe
	cli
	rts

; ---------------------------------------------------------------------
; Patch kernel serout routine at $ed37
; ---------------------------------------------------------------------
	serout=$ed37
	.patch $ed37
	jmp myserout
	
	.patch $ed41
	jmp myserout_alternate

	.section

myserout
	; Test if it is for us
	lda $ba
	cmp drive_64net
	beq myserout_entry
	; nope ... pass back to kernel
	jsr $ee8e
	jmp $ed3a

	; Alternate entry point to write to serial bus
myserout_alternate
	lda $ba
	cmp drive_64net
	beq myserout_entry
	; not for us
	jsr $ee97
	jmp $ed44

myserout_entry
	; set port to output
	lda #$ff
	sta $dd03
	lda #$00
	sta $dd0c
	lda $dd0d ;may be obsolete, but better go for sure it is cleared 
	
	; present character
	lda $95
	sta $dd01
	
	; wait for it to be accepted
myserout_loop
	lda $dd0d
	beq myserout_loop

	lda #$00
	sta $dd03
	lda $dd0c
	bne myserout_error
	lda $95
	clc
	sli
	rts

myserout_error
	sta $90
	lda $95
	sec
	cli
	rts
	
; ------------------------------------------------------------
; Kernel Load routine
; ------------------------------------------------------------

	.patch $f4f0
	jmp myload
	.section

myload
	lda $ba
	cmp drive_64net
	beq myload_entry
	jsr $f5d2
	jmp $f4f3

myload_entry
	ldy $ae
	lda #$00
	sta $dd03
	sta $dd0c
	sta $ae
	sei
	jsr loader
	sta $90
	sty $ae
	cli
	jmp $f528

loader
	ldx $dd0d
	beq loader
	lda $dd01
	sta ($ae),y
	cpx #$08
	beq load_error
	iny
	bne loader
	inc $af
	bne loader
	lda #$40
	rts
load_error
	lda $dd0c
	rts

; ------------------------------------------------------------
; Kernel Load routine
; ------------------------------------------------------------

	.patch $f61c
	jmp mysave
	.section

mysave
	pha
	lda $ba
	cmp drive_64net
	beq mysave_entry
	pla
	jsr $eddd
	jmp $f61f

mysave_entry
	pla
	; need to do that on our own, else we get the last byte form our adress buffered 
	; and not written immediatedly :-/
	sta $95
	jsr myserout_entry
	lda $ad
	sta $95
	jsr myserout_entry 
	
	ldx #$ff
	stx $dd03
	ldy $ac
	inx
	stx $ac
	lda $dd0d ;maybe obsolete

	sei
	jsr saver
	cli
	sty $ac
	lda #$00
	sta $dd03
	sta $90
	clc
	jmp $f63f

saver
	lda ($ac),y
	sta $dd01
saver_loop
	lda $dd0d
	beq saver_loop
	iny
	bne saver_next1
	inc $ad
saver_next1
	cpy $ae		
	bne saver
	lda $ad
	cmp $af
	bne saver
	rts

; ------------------------------------------------------------
; Kernel Start up & control-code hooks
; ------------------------------------------------------------

	.patch $e7ce
	jmp hotkeys

	.section

hotkeys cmp #$04   ; CTRL-D = drive select
        bne hk1
	jsr hotkey_d
	jmp $ec44

hk1	; Splice back into kernel function
	jsr $e8cb
	jmp $e7d1

hotkey_d ; Swap drive 8/9
	 ; i.e. make 64net drive 8 or 9
	 ; XXX - We should be able to patch the kernel so that
	 ; we can actually swap the devices by changing the byte
	 ; sent under attention - but for now just make it easy
         ; to change the default drive for 64net.
	lda #$08
	cmp drive_64net
	bne hke1
	lda #$09	
hke1    sta drive_64net
	; display "64NET IS" message
	tya
	pha
	ldy #$00
hke2	lda msg_64net_is,y
	beq hke3
	jsr $ffd2
	iny
	bne hke2	
hke3	; display drive number and new line
	lda drive_64net
	ora #$30
	jsr $ffd2
	lda #$0d
	jsr $ffd2
	pla
	tay
	lda #$04
	; jmp $ec44
	rts

	.section

msg_64net_is
	.byte '6','4','N','E','T',$20,'I'
	.byte 'S',$20,'D','E','V',$23,$00

	.patch $E444

	jmp init_64net

	.section

init_64net
	; Set device # by calling CTRL-D hotkey function.
	; This will also display the "64NET is device x" message
	lda #$0d
	jsr $ffd2
	lda #$05
	jsr $ffd2
	lda #$08
	sta drive_64net
	jsr hotkey_d
	; Start up basic
	jmp $a644

; ---------------------------------------------------------------------
; Patch Kernel LOAD routine to accept no filename if device is 64net
; so that SHIFT-RUN/STOP can be used to boot C64
; ---------------------------------------------------------------------
	.patch $f4bc
	jmp name_check

	.section

name_check
	lda $ba
	cmp drive_64net
	beq nc1
	; missing name error
	jmp $f710
nc1	; No name for 64net LOAD, so 
	; load boot file
	
	; set file name	
	ldx #<boot_file
	ldy #>boot_file
	lda #9
	jsr $ffbd

	; Return
	ldy $b7
	jmp $f4bf

	.section

boot_file
	; 1:BOOT.64 for C64 booting
	; 1:BOOT.65 for C65 etc...
	.byte '1',':','B','O','O','T','.','6','4'
boot_file_end
	.byte $00


; ---------------------------------------------------------------------
; BASIC interprettor hooks for @, $ etc
; ---------------------------------------------------------------------
	
	.patch $e44f
	.byte <basic_decode,>basic_decode

	.section

basic_decode
	jsr $0073
#ifdef CMD_AT
	cmp #'@'
	bne bd1
	jmp found_at
bd1
#endif
#ifdef CMD_DOLLAR
	cmp #'$'
	bne bd2
	jmp found_dollar
bd2
#endif
#ifdef CMD_BANG
	cmp #'!'
	bne bd3
	jmp found_bang
bd3
#endif
	jmp $a7e7 ; let C64 basic handle it

	.section

disable_decode
	; Remove BASIC wedge, so that ROM can be switched
	lda #$e4
	sta $0308
	lda #$a7
	sta $0309
	jmp $a7e7

#ifdef CMD_AT

found_at
	; Somewhat derived from p32 of "Anatomy of a C64"

	; write command to channel
	jsr $0073
	cmp #'Q' ;quit basic wedge
	beq disable_decode
at2	lda drive_64net
	sta $ba
	jsr $ffb1 ; LISTEN
	lda #$6f
	sta $b9
	jsr $ff93 ; LISTEN SA
	jsr $0079
at3	cmp #$00
	beq at4
	jsr fixbasicchar
	jsr $ffa8
	jsr $0073
	jmp at3
at4	

	; open command channel for reading
	lda drive_64net
	sta $ba
	jsr $ffb4 ; TALK
	lda #$6f  ; command channel
	sta $b9
	jsr $ff96 ; TKSA
at1	jsr $ffa5
	jsr $ffd2
	cmp #$0d
	bne at1	
	jsr $ffab ; UNTLK

	; back to basic
	jsr $0079
	sta $0400
	jmp $a7e7
#endif	
#ifdef CMD_DOLLAR
	.section

found_dollar
	; Somewhat derived from p33 of "Anatomy of a C64"

	; Show directory

	; Get directory file name
	lda #$3c
	sta $bb
	lda #$03
	sta $bc
	ldy #$00
	lda #'$'
	sta ($bb),y
	iny
fd1	jsr $0073
	jsr fixbasicchar
	sta ($bb),y
	iny
	cmp #$00
	bne fd1
	dey
	sty $b7

	; Open directory for reading
	lda drive_64net
	sta $ba
	lda #$60
	sta $b9
	jsr $f3d5 ; open file with name
	lda $ba
	jsr $ffb4 ; TALK
	lda $b9
	jsr $ff96 ; TKSA
	lda #0
	sta $90
	ldy #3
dl1	sty $fb
	jsr $ffa5 ; ACPTR
	sta $fc
	ldy $90
	bne dl4
	jsr $ffa5 ; ACPTR
	ldy $90
	bne dl4
	ldy $fb
	dey
	bne dl1
	ldx $fc
	jsr $bdcd
	lda #$20
	jsr $ffd2
dl3	jsr $ffa5 ; ACPTR
	ldx $90
	bne dl4
	tax
	beq dl2
	jsr $ffd2
	jmp dl3
dl2	lda #$0d
	jsr $ffd2
	ldy #$02
	bne dl1
dl4	jsr $f642

	; back to basic
	jmp $a7ae	
#endif CMD_DOLLAR

#ifdef CMD_BANG
found_bang
fb1	jsr $0073
	cmp #$00
	bne fb1
	jmp $a7ae	
#endif

	.section

fixbasicchar
	; turn tokens back to characters where necessary
	; this is to allow wild cards in directory spec
	; XXX - Incomplete - ? is not allowed yet	
	cmp #$ac ; *
	bne fd0
	lda #'*'
fd0	cmp #$99
	bne fd01
	lda #'?'
fd01	rts
